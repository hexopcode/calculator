# CORE VECTOR FUNCTIONS

VECITEM = FN(V, X) VECHEAD(V), X == 0
VECITEM = FN(V, X) VECITEM(VECTAIL(V), X - 1)
FREEZE($VECITEM)

VECLEN = FN(V) 0, VECEMPTY(V)
VECLEN = FN(V) 1 + VECLEN(VECTAIL(V))
FREEZE($VECLEN)

VECMAP = FN(V, F) V, VECEMPTY(V)
VECMAP = FN(V, F) VECCONCAT([F(VECHEAD(V))], VECMAP(VECTAIL(V), F))
FREEZE($VECMAP)

VECREDUCE = FN(V, F, INIT) INIT, VECEMPTY(V)
VECREDUCE = FN(V, F, INIT) VECREDUCE(VECTAIL(V), F, F(INIT, VECHEAD(V)))
FREEZE($VECREDUCE)

VECFILTER = FN(V, F) [], VECEMPTY(V)
VECFILTER = FN(V, F) VECCONCAT([VECHEAD(V)], VECFILTER(VECTAIL(V), F)), F(VECHEAD(V))
VECFILTER = FN(V, F) VECFILTER(VECTAIL(V), F), !F(VECHEAD(V))
FREEZE($VECFILTER)

VECUNTIL = FN(V, F) [], VECEMPTY(V)
VECUNTIL = FN(V, F) VECCONCAT([VECHEAD(V)], VECUNTIL(VECTAIL(V), F)), !F(VECHEAD(V))
VECUNTIL = FN(V, F) [], F(VECHEAD(V))
FREEZE($VECUNTIL)

VECWHILE = FN(V, F) [], VECEMPTY(V)
VECWHILE = FN(V, F) VECCONCAT([VECHEAD(V)], VECWHILE(VECTAIL(V), F)), F(VECHEAD(V))
VECWHILE = FN(V, F) [], !F(VECHEAD(V))
FREEZE($VECWHILE)

VECEVERY = FN(V, F) TRUE, VECEMPTY(V)
VECEVERY = FN(V, F) F(VECHEAD(V)), VECLEN(V) == 1
VECEVERY = FN(V, F) F(VECHEAD(V)) && VECEVERY(VECTAIL(V), F)
FREEZE($VECEVERY)

VECANY = FN(V, F) TRUE, VECEMPTY(V)
VECANY = FN(V, F) F(VECHEAD(V)), VECLEN(V) == 1
VECANY = FN(V, F) F(VECHEAD(V)) || VECANY(VECTAIL(V), F)
FREEZE($VECANY)

VECCONTAINS = FN(V, ITEM) FALSE, VECEMPTY(V)
VECCONTAINS = FN(V, ITEM) VECHEAD(V) == ITEM || VECCONTAINS(VECTAIL(V), ITEM)
FREEZE($VECCONTAINS)

VECPUSH = FN(V, ITEM) VECCONCAT(V, [ITEM])
FREEZE($VECPUSH)

VECMAKE = FN(F, SIZE) [], SIZE == 0
VECMAKE = FN(F, SIZE) VECCONCAT(VECMAKE(F, SIZE - 1), [F(SIZE - 1)])
FREEZE($VECMAKE)

VECRANGE = FN(I) VECMAKE((FN(X) X), I)
FREEZE($VECRANGE)

# UNIT TESTS
ASSERT(VECITEM([1], 0) == 1)
ASSERT(VECITEM([1,2,3], 2) == 3)

ASSERT(VECLEN([]) == 0)
ASSERT(VECLEN([1,2,3]) == 3)

DOUBLE = FN(X) X + X
ASSERT(VECMAP([], DOUBLE) == [])
ASSERT(VECMAP([1,2,3], DOUBLE) == [2,4,6])
DELETE($DOUBLE)

SUM = FN(ACC, NEXT) ACC + NEXT
ASSERT(VECREDUCE([], SUM, 0) == 0)
ASSERT(VECREDUCE([], SUM, 10) == 10)
ASSERT(VECREDUCE([1,2,3], SUM, 0) == 6)
ASSERT(VECREDUCE([1,2,3], SUM, 10) == 16)
DELETE($SUM)

ASSERT(VECFILTER([1,2,3], FN(X) X % 2 == 0) == [2])
ASSERT(VECFILTER([1,2,3], FN(X) X % 2 == 1) == [1,3])

ASSERT(VECUNTIL([1,2,3,4], FN(I) I == 3) == [1,2])
ASSERT(VECWHILE([1,2,3,4], FN(X) X < 3) == [1,2])

ASSERT(VECEVERY([1, 3, 5], FN(I) I % 2 == 1))
ASSERT(VECEVERY([1, 3, 5, 6], FN(I) I % 2 == 1) == FALSE)

ASSERT(VECANY([2, 4, 6], FN(I) I == 6))
ASSERT(VECANY([2, 4, 6], FN(I) I == 5) == FALSE)

ASSERT(VECCONTAINS([1,2,3,4], 3))
ASSERT(!VECCONTAINS([1,2,3,4], 5))

ASSERT(VECPUSH([1,2], 3) == [1,2,3])
ASSERT(VECMAKE((FN(I) I), 3) == [0,1,2])
ASSERT(VECRANGE(3) == [0,1,2])